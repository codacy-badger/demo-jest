name: auto-build-deploy

on: [push]

jobs:
      active-check:
            runs-on: ubuntu-latest
            steps:
                  - name: checking allow to build
                    run: |
                          if [ ${{secrets.BUILD}} == ACTIVE ] 
                          then
                            echo '------------------- ready to deploy and test-------------------'
                          else 
                            echo 'not ready'
                            exit 1
                          fi
      test:
            runs-on: ubuntu-latest
            needs: active-check
            steps:
                  - uses: actions/checkout@v2
                  - uses: actions/setup-node@v2
                    with:
                          node-version: '14'
                  - name: Create .env file
                    run: |
                          touch .env
                          echo JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }} >> .env
                          echo DB_HOST=${{ secrets.DB_HOST }} >> .env
                          echo DB_PORT=${{ secrets.DB_PORT }} >> .env
                          echo DB_USERNAME=${{ secrets.DB_USERNAME }} >> .env
                          echo DB_PASSWORD=${{ secrets.DB_PASSWORD }} >> .env
                          echo DB_NAME=${{ secrets.DB_NAME }} >> .env
                          echo REDIS_PORT=${{ secrets.REDIS_PORT }} >> .env
                          echo REDIS_DB_NUMBER=${{ secrets.REDIS_DB_NUMBER }} >> .env
                          echo REDIS_HOST=${{ secrets.REDIS_HOST }} >> .env
                  - name: Use Node.js ${{ matrix.node-version }}
                    uses: actions/setup-node@v1
                    with:
                          node-version: ${{ matrix.node-version }}
                  - run: yarn install
                  - run: yarn test:ci

      coverage-reporter:
            needs: test
            runs-on: ubuntu-latest
            name: codacy-coverage-reporter
            steps:
                  - uses: actions/checkout@v2
                  - name: Run codacy-coverage-reporter
                    uses: codacy/codacy-coverage-reporter-action@v1
                    with:
                          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
                          coverage-reports: coverage/lcov.info
      build-push:
            needs: coverage-reporter
            runs-on: ubuntu-latest
            steps:
                  - name: Checkout
                    uses: actions/checkout@v2
                  - name: Login Docker Hub
                    uses: docker/login-action@v1
                    with:
                          username: ${{ secrets.DOCKER_USERNAME }}
                          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}
                  - name: Set up Docker Buildx
                    uses: docker/setup-buildx-action@v1
                    id: buildx
                  - name: Build and Push for Server
                    uses: docker/build-push-action@v2
                    id: docker_build_server
                    with:
                          context: ./server
                          file: ./server/Dockerfile
                          builder: ${{steps.buildx.outputs.name}}
                          push: true
                          tags: heaty566/jest-test-server:latest
                  - name: Verify
                    run: |
                          echo ${{steps.docker_build_server.outputs.digest}}
                          echo 'Build done, ready to deploy'
      deploy:
            runs-on: ubuntu-latest
            needs: build-push
            steps:
                  - name: executing remote ssh commands using ssh key
                    uses: appleboy/ssh-action@master
                    with:
                          host: ${{ secrets.HOST }}
                          username: ${{ secrets.USERNAME }}
                          password: ${{ secrets.PASSWORD }}
                          port: ${{ secrets.PORT }}
                          script: |
                                cd app
                                cd jest
                                docker-compose pull 
                                docker-compose up -d
